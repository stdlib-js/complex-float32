{"version":3,"file":"index.mjs","sources":["../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/complex/float32/base}\n*/\nimport base from '@stdlib/complex-float32-base';\nsetReadOnly( ns, 'base', base );\n\n/**\n* @name conj\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float32/conj}\n*/\nimport conj from '@stdlib/complex-float32-conj';\nsetReadOnly( ns, 'conj', conj );\n\n/**\n* @name Complex64\n* @memberof ns\n* @readonly\n* @constructor\n* @see {@link module:@stdlib/complex/float32/ctor}\n*/\nimport Complex64 from '@stdlib/complex-float32-ctor';\nsetReadOnly( ns, 'Complex64', Complex64 );\n\n/**\n* @name imag\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float32/imag}\n*/\nimport imag from '@stdlib/complex-float32-imag';\nsetReadOnly( ns, 'imag', imag );\n\n/**\n* @name parseComplex64\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float32/parse}\n*/\nimport parseComplex64 from '@stdlib/complex-float32-parse';\nsetReadOnly( ns, 'parseComplex64', parseComplex64 );\n\n/**\n* @name real\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float32/real}\n*/\nimport real from '@stdlib/complex-float32-real';\nsetReadOnly( ns, 'real', real );\n\n/**\n* @name reim\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float32/reim}\n*/\nimport reim from '@stdlib/complex-float32-reim';\nsetReadOnly( ns, 'reim', reim );\n\n/**\n* @name reviveComplex64\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float32/reviver}\n*/\nimport reviveComplex64 from '@stdlib/complex-float32-reviver';\nsetReadOnly( ns, 'reviveComplex64', reviveComplex64 );\n\n\n// EXPORTS //\n\nexport default ns;\n"],"names":["ns","setReadOnly","base","conj","Complex64","imag","parseComplex64","real","reim","reviveComplex64"],"mappings":";;8tDAoCA,IAAAA,EAAA,CAAA,EAUAC,EAAAD,EAAA,OAAAE,GAUAD,EAAAD,EAAA,OAAAG,GAUAF,EAAAD,EAAA,YAAAI,GAUAH,EAAAD,EAAA,OAAAK,GAUAJ,EAAAD,EAAA,iBAAAM,GAUAL,EAAAD,EAAA,OAAAO,GAUAN,EAAAD,EAAA,OAAAQ,GAUAP,EAAAD,EAAA,kBAAAS"}