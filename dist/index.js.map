{
  "version": 3,
  "sources": ["../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/complex/float32/base}\n*/\nsetReadOnly( ns, 'base', require( '@stdlib/complex-float32-base' ) );\n\n/**\n* @name conj\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float32/conj}\n*/\nsetReadOnly( ns, 'conj', require( '@stdlib/complex-float32-conj' ) );\n\n/**\n* @name Complex64\n* @memberof ns\n* @readonly\n* @constructor\n* @see {@link module:@stdlib/complex/float32/ctor}\n*/\nsetReadOnly( ns, 'Complex64', require( '@stdlib/complex-float32-ctor' ) );\n\n/**\n* @name imag\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float32/imag}\n*/\nsetReadOnly( ns, 'imag', require( '@stdlib/complex-float32-imag' ) );\n\n/**\n* @name parseComplex64\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float32/parse}\n*/\nsetReadOnly( ns, 'parseComplex64', require( '@stdlib/complex-float32-parse' ) );\n\n/**\n* @name real\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float32/real}\n*/\nsetReadOnly( ns, 'real', require( '@stdlib/complex-float32-real' ) );\n\n/**\n* @name reim\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float32/reim}\n*/\nsetReadOnly( ns, 'reim', require( '@stdlib/complex-float32-reim' ) );\n\n/**\n* @name reviveComplex64\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float32/reviver}\n*/\nsetReadOnly( ns, 'reviveComplex64', require( '@stdlib/complex-float32-reviver' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n"],
  "mappings": "aA0BA,IAAIA,EAAc,QAAS,yCAA0C,EAUjEC,EAAK,CAAC,EASVD,EAAaC,EAAI,OAAQ,QAAS,8BAA+B,CAAE,EASnED,EAAaC,EAAI,OAAQ,QAAS,8BAA+B,CAAE,EASnED,EAAaC,EAAI,YAAa,QAAS,8BAA+B,CAAE,EASxED,EAAaC,EAAI,OAAQ,QAAS,8BAA+B,CAAE,EASnED,EAAaC,EAAI,iBAAkB,QAAS,+BAAgC,CAAE,EAS9ED,EAAaC,EAAI,OAAQ,QAAS,8BAA+B,CAAE,EASnED,EAAaC,EAAI,OAAQ,QAAS,8BAA+B,CAAE,EASnED,EAAaC,EAAI,kBAAmB,QAAS,iCAAkC,CAAE,EAKjF,OAAO,QAAUA",
  "names": ["setReadOnly", "ns"]
}
